# -*- coding: utf-8 -*-
"""forBoard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WClsqR9WRPWnX-2lLv8emuQytb1fbRms

Download data
"""
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d 
import numpy as np
import pandas as pd
import optim
import pickle
import random

csv_file = 'test.csv'
#'test.csv'
testSet = optim.myDataset(csv_file=csv_file)

def plot_visual(client, trainMse, trainNmse, testMse, testNmse, pos, pre_rss, rss):
    fig = plt.figure(figsize = (10, 7))
    plt.subplot(411)
    plt.plot(trainMse)
    plt.title('client'+ client+ 'loss')
    plt.ylabel('MSE')
    plt.xlabel('training epoch')

    plt.subplot(412)
    plt.plot(trainNmse)
    
    plt.ylabel('NMSE')
    plt.xlabel('training epoch')
    
    plt.subplot(413)
    plt.plot(testMse)
    plt.ylabel('MSE')
    plt.xlabel('training epoch')
    
    plt.subplot(414)
    plt.plot(testNmse)
    plt.ylabel('NMSE')
    plt.xlabel('training epoch')
       
    
    fig = plt.figure(figsize = (10, 7))
    ax = plt.axes(projection ="3d")
    #ax.scatter3D(testSet.old_pos[:,0]+42.3001, testSet.old_pos[:,1]-71.558317, rss, color = "blue")
    #ax.scatter3D(testSet.old_pos[:,0]+42.3001, testSet.old_pos[:,1]-71.558317, pre_rss, color = "green")
    ax.scatter3D(pos[:,0], pos[:,1], rss, color = "blue");
    ax.scatter3D(pos[:,0], pos[:,1], pre_rss, color = "green"); 
    ax.legend(['RSSI', 'predictRSSI'])  
    plt.title('client'+ client+ 'RSSI')
    plt.ylabel('longitude')
    plt.xlabel('latitude')

    check = random.sample(range(len(rss)), 10)
    print('check some of the test points')
    print((pre_rss-rss)[check],'difference of predict and RSSI')
    print('abs diff')
    print((abs(pre_rss-rss)>10).sum(),'difference >10')
    print((abs(pre_rss-rss)>20).sum(),'difference >20')
    print((abs(pre_rss-rss)>30).sum(),'difference >30')
    print('relative diff')
    print((abs(pre_rss-rss)/abs(rss)>10).sum(),'difference >0.1')
    print((abs(pre_rss-rss)/abs(rss)>20).sum(),'difference >0.05')
    print((abs(pre_rss-rss)/abs(rss)>30).sum(),'difference >0.01')
    print(max(pre_rss-rss),'max')

#load
numClients = 2
weight_scale = 2e-2
hidden_dims = [100, 100]
num_layers = 3
bn_model = None

test_norm,_ = optim.mse_loss(np.zeros_like(testSet.RSSI), (testSet.RSSI))
for client in range(numClients):
    ##############################################################################
    ###                     Load model for each client                         ###
    ##############################################################################
    csv_file = 'train'+str(client+1)+'.csv'
    trainSet = optim.myDataset(csv_file=csv_file)
    train_norm,_ = optim.mse_loss(np.zeros_like(trainSet.RSSI), trainSet.RSSI)
    f=open("weights\weight_bin"+str(client+1)+".bin","rb")
    load_w = {}
    load_w['W1'] = pickle.load(f)
    load_w['b1'] = pickle.load(f)
    load_w['W2'] = pickle.load(f)
    load_w['b2'] = pickle.load(f)
    load_w['W3'] = pickle.load(f)
    load_w['b3'] = pickle.load(f)
    load_w['gamma1'] = pickle.load(f)
    load_w['beta1'] = pickle.load(f)
    load_w['gamma2'] = pickle.load(f)
    load_w['beta2'] = pickle.load(f)
    load_bn = [{'mode': 'train'} for i in range(num_layers - 1)]
    for i in range(num_layers - 1):
        load_bn[i]['running_mean'] = pickle.load(f)
        load_bn[i]['running_var'] = pickle.load(f)
    f.close()
    print("client " + str(client+1)+" loads the local batch layer parameters")
    bn_model = optim.FullyConnectedNet(hidden_dims, weight_scale=weight_scale, load_weights=load_w, load_bn=load_bn)
    ##############################################################################
    ###                     Load train loss for each client                    ###
    ##############################################################################
    trainMSE = []
    trainNMSE = []
    f = open('history\clientTrainMSELoss'+str(client+1)+'.bin','rb')
    while True:
        try:
            temp = pickle.load(f)
            trainMSE.append(temp)
            trainNMSE.append(temp/train_norm)
        except EOFError:
            print("client " +str(client+1)+"finished reading training loss")
            break
    f.close()
    ##############################################################################
    ###                     Load test loss for each client                     ###
    ##############################################################################
    testMSE = []
    testNMSE = []
    f = open('history\clientTestMSELoss'+str(client+1)+'.bin','rb')
    while True:
        try:
            temp = pickle.load(f)
            testMSE.append(temp)
            testNMSE.append(temp/test_norm)
        except EOFError:
            print("client " +str(client+1)+"finished reading test loss")
            break
    f.close()
    ##############################################################################
    ###                     Plot and visualize for each client                 ###
    ##############################################################################
    pred =  bn_model.loss(testSet.pos)
    print("client " +str(client+1)+"finished predicting")
    plot_visual(str(client+1), trainMSE, trainNMSE, testMSE, testNMSE, testSet.pos, pred, testSet.RSSI) 
    print("client " +str(client+1)+" finished")
plt.show(block=False)

