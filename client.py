# -*- coding: utf-8 -*-
"""forBoard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WClsqR9WRPWnX-2lLv8emuQytb1fbRms

Download data
"""


import optim
import pickle
import sys
import os
import numpy as np

if len(sys.argv) != 3:
    print("Error, require two number input. e.g. python3 client.py 1 1")
    sys.exit()
ini = int(sys.argv[1])
client = (sys.argv[2])   
csv_file = 'test.csv'
#'test.csv'
testSet = optim.myDataset(csv_file=csv_file)
csv_file = 'train'+client+'.csv'
#'train.csv'
trainSet = optim.myDataset(csv_file=csv_file)


weight_scale = 2e-2
hidden_dims = [100, 100]
num_layers = 3
bn_model = None


# initial gradient
load_w = optim.read_bin("weights/weight_bin.bin")

load_bn = None

if ini == 1:
    if os.path.exists("history/clientTrainMSELoss"+client+".bin"):
        os.remove("history/clientTrainMSELoss"+client+".bin")
        print("client " + client+" clears train loss history")
    if os.path.exists("history/clientTestMSELoss"+client+".bin"):
        os.remove("history/clientTestMSELoss"+client+".bin")
        print("client " + client+" clears test loss history")
    if os.path.exists('clients_bn/client'+client+'.bin'):
        os.remove('clients_bn/client'+client+'.bin')
        print("client " + client+" clears batch info history")
    load_bn = [{'mode': 'train'} for i in range(num_layers - 1)]
    #for i in range(num_layers - 1):
    #    load_bn[i]['running_mean'] = pickle.load(f)
    #    load_bn[i]['running_var'] = pickle.load(f)
else:
    load_bn = optim.read_bn_bin('clients_bn/client'+client+'.bin')
    #print("client " + client+" loads the local batch layer parameters")
bn_model = optim.FullyConnectedNet(hidden_dims, weight_scale=weight_scale, load_weights=load_w, load_bn=load_bn)
#print("client " + client+" loads the global model")

num_train = trainSet.pos.shape[0]
batch_size = int (num_train / 10)
batch_mask = np.random.choice(num_train, batch_size)
X_batch = trainSet.pos[batch_mask]
y_batch = trainSet.RSSI[batch_mask]
        
trainLoss, grads = bn_model.loss(X_batch, y_batch)

optim.write_bin('weights/weight_bin'+client+'.bin', bn_model.params)
##f = open('weights\weight_bin'+client+'.bin','wb')
##for para in bn_model.params:
##    pickle.dump(bn_model.params[para], f)
optim.write_bn_bin('clients_bn/client'+client+'.bin', bn_model.bn_params)
##for para in bn_model.bn_params:
##    pickle.dump(para['running_mean'],f)
##    pickle.dump(para['running_var'],f)
##f.close()
#print('client ' + client+' stores the model weight')

#f = open('gradients\grads_bin'+client+'.bin','wb')
#for grad in grads:
#    pickle.dump(grads[grad], f)
#f.close()
optim.write_bin('gradients/grads_bin'+client+'.bin', grads)
#print('client ' + client+' obtains and stores full gradient')

f = open('history/clientTrainMSELoss'+client+'.bin','ab')
pickle.dump(trainLoss, f)
f.close()

testScores = bn_model.loss(testSet.pos)
testLoss, _ = optim.mse_loss(testScores, testSet.RSSI)
f = open('history/clientTestMSELoss'+client+'.bin','ab')
pickle.dump(testLoss, f)
f.close()

#print('client ' + client+' records the train and test MSE loss')
